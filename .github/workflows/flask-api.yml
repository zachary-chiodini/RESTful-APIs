
name: Build and Run Flask API

on:
  push:
    branches:
      - 'main'
    paths:
      - 'flask-api/**'
      - '.github/workflows/flask-api.yml'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Cache Docker Layers
        uses: actions/cache@v2.1.6
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-
      -
        name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Extract Metadata
        id: metadata
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/flask-api/flask-api-img
          flavor: latest=false
          tags: type=raw,value=latest
      -
        name: Build and Push Docker Image
        id: dockerbuild
        uses: docker/build-push-action@v2
        with:
          context: flask-api
          platforms: linux/amd64,linux/arm64
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
      -
        name: Show Image Digest
        run: echo ${{ steps.dockerbuild.outputs.digest }}
